buildscript {
    dependencies {
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.7'
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.30")
        classpath("org.owasp:dependency-check-gradle:5.0.0")
    }
}

plugins {
    id 'application'
    id 'pmd'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'org.owasp.dependencycheck' version '5.3.1'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'com.gorylenko.gradle-git-properties' version '2.0.0'
    id 'info.solidsoft.pitest' version '1.3.0'
    id 'au.com.dius.pact' version '3.5.24'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'project-report'


gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/probate/services/orchestrator")
    keys = ['git.commit.id', 'git.commit.time']
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "GMT"
}

group = 'uk.gov.hmcts.probate'
version = "4.0.0"
mainClassName = 'uk.gov.hmcts.probate.OrchestratorApplication'

sourceCompatibility = 11
targetCompatibility = 11

//check.dependsOn dependencyCheckAnalyze
// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}
jacoco {
    toolVersion = '0.8.0'
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

sonarqube {
    properties {
        property "sonar.exclusions", "**uk/gov/hmcts/probate/appinsights/*, **/PaMapper.java, **/IntestacyMapper.java, " +
                "**/ScheduledConfiguration.java, **/AuthenticateUserResponse.java, **/TokenExchangeResponse.java, " +
                "**/FormDataMigrator.java, **/IdamUserEmail.java, **/IdamUsersCsvLoader.java"
        property "sonar.projectName", "PROBATE :: Probate-Orchestrator-Service"
        property "sonar.projectKey", "Probate-Orchestrator-Service"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

test.finalizedBy jacocoTestReport

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

pitest {
    targetClasses = ['uk.gov.hmcts.probate.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 50
    timeoutConstInMillis = 30000
}

sonarqube {
    properties {
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
    testFunctional {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
    testContract {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }

}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.testSmoke.output.classesDirs
    classpath = sourceSets.testSmoke.runtimeClasspath
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task functional(type: Test) {
    description = "Runs functional Tests"
    testClassesDirs = sourceSets.testFunctional.output.classesDirs
    classpath = sourceSets.testFunctional.runtimeClasspath
    println classpath
    finalizedBy aggregate
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task runProviderPactTests(type: Test) {
    description = "Runs Contract Tests"
    testClassesDirs = sourceSets.testContract.output.classesDirs
    classpath = sourceSets.testContract.runtimeClasspath
}

task runConsumerPactTests(type: Test) {
    description = "Runs Contract Tests"
    useJUnitPlatform()
    testClassesDirs = sourceSets.testContract.output.classesDirs
    classpath = sourceSets.testContract.runtimeClasspath
}

def versions = [
        commonsIO                       : '2.6',
        hmctsJavaLogging                : '5.1.5',
        restAssured                     : '3.0.3',
        serviceTokenGenerator           : '0.6.0',
        lombok                          : '1.18.8',
        springfoxSwagger                : '2.6.1',
        springCloudWiremock             : '1.2.4.RELEASE',
        mapStruct                       : '1.3.0.Final',
        authCheckerLib                  : '2.1.4',
        springCloudStarterNetflixHystrix: '2.1.1.RELEASE',
        serenityBdd                     : '2.0.30',
        serenitySpring                  : '1.0.26',
        serentity                       : '2.0.17',
        jjwt                            : '0.9.0',
        serviceAuthProviderClient       : '3.0.0',
        restAssured                     : '3.0.7',
        piTest                          : '1.3.2',
        commonMark                      : '0.11.0',
        probateCommons                  : '1.0.6.1_PRO-7229',
        jacksonDatabind                 : '2.9.8',
        pact_version                    : '3.5.24',
        feignHttpClient                 : '10.2.3'

]

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}


pmd {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/pmd")
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2"
        allowInsecureProtocol=true
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springcloud_version}"
    }
}
processResources {
    from('src/lib/AI-Agent.xml') {
        into 'lib'
    }
}


dependencies {

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.gradle') {
                details.useVersion '1.4'
                details.because 'API breakage in higher versions'
            }
        }

    }
    implementation('com.fasterxml.jackson.core:jackson-databind:2.9.8') {
        force = true
    }
    implementation('io.github.openfeign:feign-core:10.2.3') {
        force = true
    }

    implementation('org.springframework.cloud:spring-cloud-openfeign-core:2.1.1.RELEASE') {
        force = true
    }
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    implementation group: 'org.springframework.retry', name: 'spring-retry'
    implementation group: 'com.google.guava', name: 'guava', version: '27.0-jre'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas'

    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springCloudStarterNetflixHystrix
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix-dashboard', version: versions.springCloudStarterNetflixHystrix
    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springCloudStarterNetflixHystrix) {
        force = true
    }
    implementation group: 'org.springframework.hateoas', name: 'spring-hateoas'
    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient

    implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.hmctsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.hmctsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.hmctsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.hmctsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
    implementation group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: versions.authCheckerLib
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceAuthProviderClient
    implementation group: 'uk.gov.hmcts.reform.probate', name: 'probate-commons', version: versions.probateCommons

    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIO

    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'org.mapstruct', name: 'mapstruct-jdk8', version: versions.mapStruct
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: versions.jacksonDatabind

    implementation group: 'org.pitest', name: 'pitest', version: versions.piTest
    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: versions.commonMark
    implementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
    implementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'
    compileOnly group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapStruct
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapStruct

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas'
    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: versions.springCloudWiremock
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'org.mapstruct', name: 'mapstruct-jdk8', version: versions.mapStruct
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
    testImplementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: versions.jacksonDatabind
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapStruct

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testImplementation('io.github.openfeign:feign-core:9.7.0')

    testSmokeImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testSmokeImplementation sourceSets.main.runtimeClasspath
    testSmokeImplementation sourceSets.test.runtimeClasspath

    testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serentity
    testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serentity
    testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serentity
    testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serentity
    testFunctionalImplementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    testFunctionalImplementation group: 'io.rest-assured', name: 'rest-assured', version: '3.1.1'
    testFunctionalImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testFunctionalImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
    testFunctionalImplementation sourceSets.main.runtimeClasspath
    testFunctionalImplementation sourceSets.test.runtimeClasspath
    testFunctionalAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    testContractImplementation(group: 'io.github.openfeign', name: 'feign-core', version: '9.7.0') {
        force = true
    }
    testContractImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'au.com.dius', name: 'pact-jvm-provider-spring_2.12', version: versions.pact_version
    testContractImplementation group: 'au.com.dius', name: 'pact-jvm-provider-spring_2.12', version: versions.pact_version
    testContractImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
    testContractImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version
    testContractImplementation("org.junit.jupiter:junit-jupiter-api:5.3.2")
    testContractRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    testContractImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testContractImplementation sourceSets.main.runtimeClasspath
    testContractImplementation sourceSets.test.runtimeClasspath
    testContractImplementation(group: 'io.github.openfeign', name: 'feign-core', version: '9.7.0') {
        force = true
    }
    testContractRuntimeOnly(group: 'io.github.openfeign', name: 'feign-core', version: '9.7.0') {
        force = true
    }


}
task printbranch {
    doLast {
        print project.pactBrokerTag
    }
}

pact {
    publish {
        pactDirectory = 'target/pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pactVersion
    }
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

compileJava {
    options.compilerArgs << '-parameters'
}

bootJar {
    archiveFileName = 'probate-orchestrator-service.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}
