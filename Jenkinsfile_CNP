#!groovy

@Library("Infrastructure")

String product = "probate"
String component = "orchestrator-service"

List<LinkedHashMap<String, Object>> secrets = [
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("java", product, component) {
  env.PACT_BROKER_URL = "url"
  loadVaultSecrets(secrets)
  enableSlackNotifications('#probate-jenkins')

  before('buildinfra:prod') {
    error 'Deliberately breaking pipeline to prevent prod deployment'
  }
  after('test') {
    try {
       // sh './gradlew pitest'
    } finally {
        //steps.archiveArtifacts "build/reports/pitest/**/*.*"
    }

    try {
   //     sh './gradlew contract && ./gradlew pactPublish'
    } finally {
        //steps.archiveArtifacts "build/reports/pitest/**/*.*"
    }
    junit 'build/test-results/test/**/*.xml'
    archiveArtifacts 'build/reports/tests/test/index.html'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "probate-submit-service Test Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "probate-submit-service Code Coverage Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/findbugs",
            reportFiles          : "main.html",
            reportName           : "probate-submit-service find Bugs Report"
    ]
  }

  after('functionalTest:aat') {
      publishHTML target: [
              reportDir            : "target/site/serenity/",
              reportFiles          : "index.html",
              reportName           : "AAT Functional Tests",
              alwaysLinkToLastBuild: true
      ]
  }

  after('functionalTest:spreview') {
      publishHTML target: [
              reportDir            : "target/site/serenity/",
              reportFiles          : "index.html",
              reportName           : "Preview Functional Tests",
              alwaysLinkToLastBuild: true
      ]
  }
}
