#!groovy

@Library("Infrastructure")

String product = "probate"
String component = "orchestrator-service"

def secrets = [
        'probate-${env}'      : [
        secret('probatePersistenceUrl', 'TEST_PERSISTENCE_URL'),
        secret('probateBusinessUrl', 'TEST_BUSINESS_URL'),
        secret('s2sAuthTotpSecret', 'S2S_AUTH_TOTP_SECRET'),
        secret('probateIdamSecret', 'IDAM_SECRET'),
        secret('probateIdamUserName', 'IDAM_USERNAME'),
        secret('probateIdamPassword', 'IDAM_PASSWORD'),
        secret('probateCcdDataStoreApi', 'CCD_DATA_STORE_API_URL'),
        secret('serviceAuthProviderBaseUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
        secret('probateUserAuthUrl', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
        secret('probateIdamOauthRedirectUrl', 'IDAM_OAUTH2_REDIRECT_URI'),
        secret('probate-mail-host', 'PROBATE_SUB_MAIL_HOST'),
        secret('probate-mail-username', 'PROBATE_SUB_MAIL_USERNAME'),
        secret('probate-mail-password', 'PROBATE_SUB_MAIL_PASSWORD'),
        secret('probate-mail-port', 'PROBATE_SUB_MAIL_PORT'),
        secret('probate-mail-sender', 'PROBATE_SUB_MAIL_SENDER'),
        secret('probate-mail-recipient', 'PROBATE_SUB_MAIL_REC'),
        secret('idamRedirectUrl', 'IDAM_REDIRECT_URL'),
        secret('payCaseWorkerUser','PAYMENT_CASEWORKER_USERNAME'),
        secret('payCaseWorkerPass','PAYMENT_CASEWORKER_PASSWORD')
]]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withPipeline("java", product, component) {
    loadVaultSecrets(secrets)
    enableAksStagingDeployment()
    enableSlackNotifications('#probate-jenkins')
    enableDockerBuild()
    
////  enableDeployToAKS()
    installCharts()
        /*   
    disableLegacyDeployment()
   
    before('buildinfra:prod') {
            error 'Deliberately breaking pipeline to prevent prod deployment'
    }
      */
    after('test') {

//        try {
//            if (env.CHANGE_BRANCH || env.BRANCH_NAME == 'master') {
//                env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
//                env.PACT_BROKER_PORT = "443"
//                env.PACT_BROKER_SCHEME = "https"
//                env.PACT_BROKER_FULL_URL = "https://pact-broker.platform.hmcts.net"
//                env.PACT_BRANCH_NAME = env.CHANGE_BRANCH
//                if (env.BRANCH_NAME == 'master') {
//                    env.PACT_BRANCH_NAME = 'master'
//                }
//                // sh './gradlew pitest'
//                env.PACT_BROKER_VERSION = sh(returnStdout: true, script: 'git rev-parse --verify --short HEAD')
//                sh 'printenv'
//                sh './gradlew runConsumerPactTests'
//                sh './gradlew runProviderPactTests -Dpact.provider.version=${PACT_BROKER_VERSION}'
//                sh './gradlew pactPublish'
//                sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.63.0/pact-1.63.0-linux-x86_64.tar.gz'
//                sh 'tar xzf pact-1.63.0-linux-x86_64.tar.gz'
//                dir('pact/bin') {
//                    //sh './pact-broker can-i-deploy --retry-while-unknown=12 --retry-interval=10 -a probate_orchestrator_service -b ${PACT_BROKER_FULL_URL} -e ${PACT_BROKER_VERSION}'
//                }
//            }
//            } finally {
//                //steps.archiveArtifacts "build/reports/pitest/**/*.*"
//                archiveArtifacts "build/reports/tests/**/*.*"
//            }



        junit 'build/test-results/test/**/*.xml'
        archiveArtifacts 'build/reports/tests/test/index.html'
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/test",
                reportFiles          : "index.html",
                reportName           : "probate-orchestrator-service Test Report"
        ]

        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/jacoco",
                reportFiles          : "index.html",
                reportName           : "probate-orchestrator-service Code Coverage Report"
        ]

        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/findbugs",
                reportFiles          : "main.html",
                reportName           : "probate-orchestrator-service find Bugs Report"
        ]
    }

    after('functionalTest:aat') {
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "AAT Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }

    after('functionalTest:spreview') {
        publishHTML target: [
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "Preview Functional Tests",
                alwaysLinkToLastBuild: true
        ]
    }
}
